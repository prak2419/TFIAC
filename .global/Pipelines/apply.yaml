parameters:
  - name: 'environment'
    type: string
    default: dev
    values:
    - dev
    - prod

  - name: 'buildType'
    type: string
    default: current
    values:
    - current
    - specific
  
  - name: 'buildVersion'
    type: string
    default: latest
    values:
    - latest
    - specific
    - latestFromBranch
  
  - name: 'buildId'
    type: string
    default: ' '
  
  - name: 'branchName'
    type: string
    default: '/refs/heads/test2'
    values:
    - /refs/heads/test2
    - /refs/heads/master
    - /refs/heads/dev0
    - /refs/heads/prod
  
variables:
  - ${{ if eq(parameters.environment, 'dev') }}:
    - template: dev-variables.yaml
  - ${{ if eq(parameters.environment, 'prod') }}:
    - template: prod-variables.yaml

jobs:
  - deployment:
    pool: $(poolName)
    displayName: 'Deploy Terraform Modules'
    environment: '${{ parameters.environment }}'
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            - ${{ if eq( parameters['buildType'], 'specific') }}:
              - task: DownloadBuildArtifacts@1
                displayName: 'Download Build Artifacts'
                inputs:
                  buildType: '${{ parameters.buildType }}'
                  buildVersionToDownload: '${{ parameters.buildVersion }}'
                  buildId: '${{ parameters.buildId }}'
                  branchName: '${{ parameters.branchName }}'
                  artifactName: $(artifactName)
                  downloadType: 'single'
                  downloadPath: $(System.ArtifactsDirectory)
                  project: $(project)
                  pipeline: $(pipeline)
            
            - ${{ else }}:
              - task: DownloadBuildArtifacts@1
                displayName: 'Download Build Artifacts'
                inputs:
                  buildType: '${{ parameters.buildType }}'
                  buildVersionToDownload: '${{ parameters.buildVersion }}'
                  buildId: '$(Build.BuildId)'
                  branchName: '${{ parameters.branchName }}'
                  artifactName: $(artifactName)
                  downloadType: 'single'
                  downloadPath: $(System.ArtifactsDirectory)
                  project: $(project)
                  pipeline: $(pipeline)
        
            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
              displayName: 'Install Terraform latest'
              inputs:
                terraformVersion: 'latest'

            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
              displayName: 'Terraform : azurerm - Init'
              inputs:
                backendServiceArm: SharedResources
                backendAzureRmResourceGroupName: $(backendResourceGroupName)
                backendAzureRmStorageAccountName: $(backendStorageAccountName)
                backendAzureRmContainerName: $(backendContainerName)
                backendAzureRmKey: '$(moduleName)-$(environment).tfstate'
                workingDirectory: '$(System.ArtifactsDirectory)\$(artifactName)\${{ parameters.environment }}'
            
            - powershell: |
                terraform workspace new ${{ parameters.environment }}
                terraform workspace select ${{ parameters.environment }}
              displayName: 'Create and Set the Terraform workspace'
              workingDirectory: '$(System.ArtifactsDirectory)\$(artifactName)\${{ parameters.environment }}'

            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
              displayName: 'Terraform : azurerm - Plan'
              inputs:
                provider: azurerm
                command: 'plan'
                workingDirectory: '$(System.ArtifactsDirectory)\$(artifactName)\${{ parameters.environment }}'
                commandOptions: '-var-file=${{ parameters.environment }}.auto.tfvars -out=${{ parameters.environment }}.tfplan'
                environmentServiceNameAzureRM: SharedResources
                                
            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
              displayName: 'Terraform : azurerm - Apply'
              inputs:
                provider: azurerm
                command: 'apply'
                workingDirectory: '$(System.ArtifactsDirectory)\$(artifactName)\${{ parameters.environment }}'
                commandOptions: '-var-file=${{ parameters.environment }}.auto.tfvars -auto-approve'
                environmentServiceNameAzureRM: SharedResources