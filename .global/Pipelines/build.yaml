parameters:
  - name: 'environment'
    type: string
    default: dev
    values:
    - dev
    - prod
  
variables:
  - ${{ if eq(parameters.environment, 'dev') }}:
    - template: dev-variables.yaml
  - ${{ if eq(parameters.environment, 'prod') }}:
    - template: prod-variables.yaml

#Trigger from branch
trigger:
  branches:
    include:
      - prod
      - dev0

jobs:
  - job: 'BuildModule_vnetdemo'
    pool: $(poolName)
    displayName: 'Build Packages'
    workspace:
      clean: all
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      fetchDepth: true

    - task: CopyFiles@2
      displayName: 'Filter folders'
      inputs:
        Contents: |
          **
          !**\.git\**
          !**\.terraform\**
        targetFolder: $(Build.ArtifactStagingDirectory)
    
    - task: AzureCLI@2
      displayName: 'Azure CLI - Promote Service Principal'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$($env:servicePrincipalId)"

          Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$($env:servicePrincipalKey)"

          Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$($env:tenantId)"
        addSpnToEnvironment: true
    
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(serviceConnection)
        ConnectedServiceNameARM: $(serviceConnection)
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          $buildId = "$(Build.BuildId)"
          $timestamp = Get-Date -Format "yyyyMMdd_HHmmss""
          $buildNumber = "$(Build.BuildNumber)"
          $azureAplicationId ="$(ARM_CLIENT_ID)"
          $azureTenantId= "$(ARM_TENANT_ID)"
          $azurePassword = ConvertTo-SecureString "$(ARM_CLIENT_SECRET)" -AsPlainText -Force
          $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
          Connect-AzAccount -Credential $psCred -TenantId $azureTenantId  -ServicePrincipal
          $storageAccountName = "$(backendStorageAccountName)"
          $resourceGroupName = "$(backendResourceGroupName)"
          $containerName = "$(buildContainerName)"
          $blobName = "buildId.csv"
          $storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName
          $storageContext = $storageAccount.Context
          $container = Get-AzStorageContainer -Name $containerName -Context $storageContext
          $blob = Get-AzStorageBlob -Container $containerName -Context $storageContext -Blob $blobName -Destination .\$blobName -ErrorAction SilentlyContinue
          $arr = @()
          $psobj = [PSCustomobject]@{
              Buildid = $buildId
              Buildnumber = $buildNumber
              Timestamp = $timestamp
          }
          $arr += $psobj
          $arr | Export-Csv -Path .\$blobName -NoTypeInformation
          Set-AzStorageBlobContent -Container $containerName -File .\$blobName -Blob $blobName -Context $storageContext -Force
          Remove-Item -Path .\$blobName -Force
        workingDirectory: '$(System.ArtifactsDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
        publishLocation: 'Container'