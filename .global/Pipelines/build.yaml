parameters:
  - name: 'environment'
    type: string
    default: dev
    values:
    - dev
    - prod
  
variables:
  - ${{ if eq(parameters.environment, 'dev') }}:
    - template: dev-variables.yaml
  - ${{ if eq(parameters.environment, 'prod') }}:
    - template: prod-variables.yaml

#Trigger from branch
trigger:
  branches:
    include:
      - prod
      - dev0

jobs:
  - job: 'BuildModule_vnetdemo'
    pool: $(poolName)
    displayName: 'Build Packages'
    workspace:
      clean: all
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      fetchDepth: true

    - task: CopyFiles@2
      displayName: 'Filter folders'
      inputs:
        Contents: |
          **
          !**\.git\**
          !**\.terraform\**
        targetFolder: $(Build.ArtifactStagingDirectory)
    
    - task: AzureCLI@2
      displayName: 'Azure CLI - Promote Service Principal'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "##vso[task.setvariable variable=CLIENT_ID]$($env:servicePrincipalId)"

          Write-Host "##vso[task.setvariable variable=CLIENT_SECRET]$($env:servicePrincipalKey)"

          Write-Host "##vso[task.setvariable variable=TENANT_ID]$($env:tenantId)"
        addSpnToEnvironment: true
    
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: $(serviceConnection)
        ConnectedServiceNameARM: $(serviceConnection)
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          $buildId = "$(Build.BuildId)"
          $timestamp = Get-Date -Format "yyyy/MM/dd_HH:mm:ss"
          $buildNumber = "$(Build.BuildNumber)"
          $azureAplicationId ="$(CLIENT_ID)"
          $azureTenantId= "$(TENANT_ID)"
          $azurePassword = ConvertTo-SecureString "$(CLIENT_SECRET)" -AsPlainText -Force
          $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
          Connect-AzAccount -Credential $psCred -TenantId $azureTenantId  -ServicePrincipal
          $storageAccountName = "$(backendStorageAccountName)"
          $resourceGroupName = "$(backendResourceGroupName)"
          $containerName = "$(buildContainerName)"
          $blobName = "buildId.csv"
          $storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName
          $storageContext = $storageAccount.Context
          $container = Get-AzStorageContainer -Name $containerName -Context $storageContext
          $blob = Get-AzStorageBlobContent -Container $containerName -Context $storageContext -Blob $blobName -Destination .\$blobName -ErrorAction SilentlyContinue
          $arr = @()
          $psobj = [PSCustomobject]@{
              Buildid = $buildId
              Buildnumber = $buildNumber
              Timestamp = $timestamp
          }
          $arr += $psobj
          $arr | Export-Csv -Path .\$blobName -NoTypeInformation -Append -Force
          Set-AzStorageBlobContent -Container $containerName -File .\$blobName -Blob $blobName -Context $storageContext -Force
          Remove-Item -Path .\$blobName -Force
        workingDirectory: '$(System.ArtifactsDirectory)'
    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      displayName: 'Install Terraform latest'
      inputs:
        terraformVersion: 'latest'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform : azurerm - Init'
      inputs:
        backendServiceArm: SharedResources
        backendAzureRmResourceGroupName: $(backendResourceGroupName)
        backendAzureRmStorageAccountName: $(backendStorageAccountName)
        backendAzureRmContainerName: $(backendContainerName)
        backendAzureRmKey: '$(moduleName)-$(environment).tfstate'
        workingDirectory: '$(System.ArtifactsDirectory)\$(environment)'
            
    - powershell: |
        terraform workspace new $(environment)
        terraform workspace select $(environment)
      displayName: 'Create and Set the Terraform workspace'
      workingDirectory: '$(System.ArtifactsDirectory)\$(environment)'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform : azurerm - Plan'
      inputs:
        provider: azurerm
        command: 'plan'
        workingDirectory: '$(System.ArtifactsDirectory)\$(environment)'
        commandOptions: '-var-file=$(environment).auto.tfvars -out=$(environment).tfplan'
        environmentServiceNameAzureRM: SharedResources
        
            #- powershell: |
            #    $copydir = "C:\dev\tfstate"
            #    if (!(Test-Path $copydir)) { New-Item -ItemType Directory -Force -Path $copydir }
            #    $date = Get-Date -format '%y%m%d%H%M%S'
            #    $buildversion = "${Build.BuildNumber}"
            #    $appendString = "$date-$buildversion"
            #    Copy-Item $(System.ArtifactsDirectory)\Demo\${{ parameters.environment }}\${{ parameters.environment }}-tfplan C:\dev\tfstate\$appendString-${{ parameters.environment }}-tfplan
            #  displayName: 'Copy Terraform plan to remote folder'
            #  workingDirectory: '$(System.ArtifactsDirectory)\Demo\${{ parameters.environment }}'
    - powershell: |
        terraform show $(System.ArtifactsDirectory)\$(environment)\$(environment).tfplan > $(environment).ansi
      displayName: 'Create and Set the Terraform workspace'
      workingDirectory: '$(System.ArtifactsDirectory)\$(environment)'
    
    - task: AzureFileCopy@4
      inputs:
        SourcePath: $(System.ArtifactsDirectory)\$(environment)\$(environment).tfplan 
        azureSubscription: 'SharedResources' 
        Destination: 'AzureBlob'
        resourceGroup: $(backendResourceGroupName)
        storage: $(backendStorageAccountName)
        ContainerName: $(backendRemoteContainerName)
        BlobPrefix: "$(Build.BuildNumber)_$(moduleName)-$(environment).tfplan"

    - task: AzureFileCopy@4
      inputs:
        SourcePath: $(System.ArtifactsDirectory)\$(environment)\$(environment).ansi
        azureSubscription: 'SharedResources' 
        Destination: 'AzureBlob'
        resourceGroup: $(backendResourceGroupName)
        storage: $(backendStorageAccountName)
        ContainerName: $(backendRemoteContainerName)
        BlobPrefix: "$(Build.BuildNumber)_$(moduleName)-$(environment).ansi"
              

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
        publishLocation: 'Container'